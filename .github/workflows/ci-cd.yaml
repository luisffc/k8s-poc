---
name: CI/CD Pipeline - KinD

on:
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Security Scanning Job - runs first to fail fast on security issues
  security-scan:
    runs-on: ubuntu-24.04
    env:
      # Optimize for GitHub Actions cache issues
      ACTIONS_STEP_DEBUG: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for some security tools

      # Secrets Detection
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      # Python Security Analysis
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Security Tools
        run: |
          pip install semgrep pip-audit

      - name: Run Semgrep (SAST)
        run: |
          # Install and run Semgrep directly
          semgrep --config=auto --json --output=semgrep-results.json . || true
          semgrep --config=auto --text .

      - name: Run pip-audit (Dependency Scanning)
        run: |
          pip-audit --requirement service_a/requirements.txt --format=json --output=pip-audit-a.json || true
          pip-audit --requirement service_b/requirements.txt --format=json --output=pip-audit-b.json || true
          pip-audit --requirement service_a/requirements.txt
          pip-audit --requirement service_b/requirements.txt

      # Dockerfile Security
      - name: Run Hadolint (Dockerfile Linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: service_a/Dockerfile
          failure-threshold: warning

      - name: Run Hadolint for Service B
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: service_b/Dockerfile
          failure-threshold: warning

      # Infrastructure as Code Security
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets
          output_format: sarif
          output_file_path: checkov-report.sarif

      # Upload security reports
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            semgrep-results.json
            pip-audit-*.json
            checkov-report.sarif
          retention-days: 30

  build:
    needs: security-scan  # Only build if security scan passes
    strategy:
      matrix:
        service:
          - id: service_a
            name: service-a
            path: ./service_a
          - id: service_b
            name: service-b
            path: ./service_b
    runs-on: ubuntu-24.04
    env:
      # Optimize for GitHub Actions cache issues
      ACTIONS_STEP_DEBUG: false
    steps:
      - uses: actions/checkout@v4

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.service.name }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Build Service Image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ matrix.service.path }}
          tags: ${{ steps.meta.outputs.tags }}

      # Container Security Scanning
      - name: Run Trivy Container Vulnerability Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ matrix.service.name }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service.id }}-results.sarif'
          scanners: 'vuln,config'

      - name: Run Trivy Container Secrets Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ matrix.service.name }}:sha-${{ github.sha }}
          format: 'table'
          scanners: 'secret'
          # Use built-in secret detection without custom config

      - name: Run Trivy Critical/High Vulnerabilities Check
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ matrix.service.name }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '0'  # Continue even if vulnerabilities found
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results-${{ matrix.service.id }}
          path: 'trivy-${{ matrix.service.id }}-results.sarif'
          retention-days: 30

  local-deploy:
    needs: build
    runs-on: ubuntu-24.04
    env:
      # Optimize for GitHub Actions cache issues
      ACTIONS_STEP_DEBUG: false
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Pull Docker Images
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/service-a:sha-${{ github.sha }}
          docker pull ghcr.io/${{ github.repository_owner }}/service-b:sha-${{ github.sha }}
          docker images

      - name: Set up Kubernetes (KinD)
        uses: helm/kind-action@v1
        with:
          version: "v0.24.0"
          cluster_name: kind

      - name: Load images into KinD
        run: |
          kind load docker-image ghcr.io/${{ github.repository_owner }}/service-a:sha-${{ github.sha }}
          kind load docker-image ghcr.io/${{ github.repository_owner }}/service-b:sha-${{ github.sha }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Deploy with Helm
        run: |
          helm upgrade --install my-app ./charts/my-app \
            --set service-a.image.repository=ghcr.io/${{ github.repository_owner }}/service-a \
            --set service-b.image.repository=ghcr.io/${{ github.repository_owner }}/service-b \
            --set service-a.image.tag=sha-${{ github.sha }} \
            --set service-b.image.tag=sha-${{ github.sha }}

      # Runtime Security Validation
      - name: Install Security Tools
        run: |
          # Install Polaris for best practices validation
          wget https://github.com/FairwindsOps/polaris/releases/download/8.5.1/polaris_linux_amd64.tar.gz
          tar xzf polaris_linux_amd64.tar.gz
          sudo mv polaris /usr/local/bin/

      - name: Kubernetes Security Validation
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available deployment --all --timeout=300s

          # Get deployed manifests for security analysis
          kubectl get all -o yaml > deployed-manifests.yaml

          # Run Polaris audit
          echo "Running Polaris best practices audit..."
          polaris audit --audit-path deployed-manifests.yaml --format json > polaris-report.json || true
          polaris audit --audit-path deployed-manifests.yaml

          # Check for security contexts and non-root users
          echo "Checking security contexts..."
          kubectl get pods -o jsonpath='{range .items[*]}{.metadata.name}{": "}{.spec.securityContext}{"\n"}{end}'
          kubectl get pods -o jsonpath='{range .items[*]}{.metadata.name}{": "}{.spec.containers[*].securityContext}{"\n"}{end}'

      - name: Runtime Container Security Scan
        run: |
          # Scan running containers with Trivy
          for pod in $(kubectl get pods -o jsonpath='{.items[*].metadata.name}'); do
            echo "Scanning pod: $pod"
            kubectl get pod $pod -o jsonpath='{.spec.containers[*].image}' | xargs -I {} trivy image {} || true
          done

      - name: Network Policy Validation
        run: |
          # Check for network policies
          kubectl get networkpolicies
          if [ $(kubectl get networkpolicies --no-headers | wc -l) -eq 0 ]; then
            echo "WARNING: No network policies found. Consider implementing network segmentation."
          fi

      - name: RBAC Security Check
        run: |
          # Audit RBAC permissions
          echo "Current RBAC roles and bindings:"
          kubectl get roles,rolebindings,clusterroles,clusterrolebindings

          # Check for overly permissive service accounts
          kubectl get serviceaccounts -o yaml > serviceaccounts.yaml
          grep -E "(cluster-admin|admin)" serviceaccounts.yaml || echo "No cluster-admin bindings found in service accounts"

      - name: Upload Runtime Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: runtime-security-reports
          path: |
            deployed-manifests.yaml
            polaris-report.json
            serviceaccounts.yaml
          retention-days: 30

      - name: Test Services communication
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=service-a --timeout=60s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=service-b --timeout=60s
          kubectl port-forward svc/my-app-service-b 8012:8012 &
          sleep 5
          curl -s http://0.0.0.0:8012/ping_service_a | grep "Greetings from Service A"
